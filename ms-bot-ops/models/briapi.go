package models

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/go-resty/resty"
	"github.com/vjeantet/jodaTime"
)

func CallApi() string {
	gte := strconv.FormatInt(GetLast15Minutes(), 10)
	lte := strconv.FormatInt(GetTimeNow(), 10)
	log.Println("Gte : ", gte)
	log.Println("Lte : ", lte)
	id := &AutoGenerated{}
	resp, _ := request().
		SetHeader("Content-Type", "application/json").
		SetBody(``).
		SetBasicAuth("elastic", "P@ssw0rd2019").
		SetResult(id).
		Post("http://172.18.102.197:9200/apigee-proxy-*/_search")

	s := resp.String()
	//log.Println("ss ",s)
	jsonErr := json.Unmarshal([]byte(s), id)
	if jsonErr != nil {
		//log.Print("adad asds ,",resp)
	}

	log.Println("LEN ", len(id.Aggregations.Num2.Buckets))

	var listResult []string
	a := ""
	for i := 0; i < len(id.Aggregations.Num2.Buckets); i++ {
		fmt.Println("A :", id.Aggregations.Num2.Buckets[i].Key)
		fmt.Println("B :", id.Aggregations.Num2.Buckets[i].DocCount)
		for j := 0; j < len(id.Aggregations.Num2.Buckets[i].Num3.Buckets); j++ {
			fmt.Println("C :", id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].Key)
			//fmt.Println("D :",id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].DocCount)
			a = fmt.Sprintf("%s | %s | %d ", "\n"+id.Aggregations.Num2.Buckets[i].Key, id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].Key, id.Aggregations.Num2.Buckets[i].DocCount)
			for k := 0; k < len(id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].Num4.Buckets); k++ {
				fmt.Println("E :", id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].Num4.Buckets[k].Key)
				fmt.Println("F :", id.Aggregations.Num2.Buckets[i].Num3.Buckets[j].Num4.Buckets[k].DocCount)
			}
		}
		listResult = append(listResult, a)
	}

	aa := strings.Join(listResult, "")
	//log.Println(aa)

	return aa

}

func request() *resty.Request {
	return resty.New().SetDebug(false).
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(15)).
		SetTimeout(60 * time.Second).
		R()
}

type AutoGenerated struct {
	Took     int  `json:"took"`
	TimedOut bool `json:"timed_out"`
	Shards   struct {
		Total      int `json:"total"`
		Successful int `json:"successful"`
		Skipped    int `json:"skipped"`
		Failed     int `json:"failed"`
	} `json:"_shards"`
	Hits struct {
		Total    int           `json:"total"`
		MaxScore int           `json:"max_score"`
		Hits     []interface{} `json:"hits"`
	} `json:"hits"`
	Aggregations struct {
		Num2 struct {
			DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
			SumOtherDocCount        int `json:"sum_other_doc_count"`
			Buckets                 []struct {
				Num3 struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Num4 struct {
							DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
							SumOtherDocCount        int `json:"sum_other_doc_count"`
							Buckets                 []struct {
								Key      string `json:"key"`
								DocCount int    `json:"doc_count"`
							} `json:"buckets"`
						} `json:"4"`
						Key      string `json:"key"`
						DocCount int    `json:"doc_count"`
					} `json:"buckets"`
				} `json:"3"`
				Key      string `json:"key"`
				DocCount int    `json:"doc_count"`
			} `json:"buckets"`
		} `json:"2"`
	} `json:"aggregations"`
	Status int `json:"status"`
}

func GetBodyMessageBriapi() string {
	var bodys = []string{}
	//bodys = append(bodys, "\nDear "+"partnerName"+",\n\nWe want to inform you that the transaction for refund cannot be processed\nbecause the balance on your checking account is insufficient:")
	bodys = append(bodys, "\n==========================")
	bodys = append(bodys, "\nTesting Report BRIAPI : "+jodaTime.Format("dd-MM-YYYY HH:mm:ss", time.Now()))
	bodys = append(bodys, "\n==========================")

	bodys = append(bodys, "\n1. Testing Data FT Internal SC 200 (Inquiry)\t:\t"+CallApi())

	bodys = append(bodys, "\n\nWe would be very happy to assist you.\nThank you.\n\nBest Regards,\n\nBRIAPI Ops Team")

	return strings.Join(bodys, "")
}

func GetTimeNow() int64 {
	return time.Now().UnixNano() / 1000000
}

func GetLast15Minutes() int64 {
	now := time.Now()
	count := 1
	then := now.Add(time.Duration(-count) * time.Minute).UnixNano()
	return then / 1000000
}
